/*
Author		:	Gautam Kumar
Date		:	Thursday 03 July 2014 05:35:25 PM IST 
Program		:	A C program to find the closest pair among a given set of pair 
				of points in a 2D plane
Arguments	:	
				1) filename containing the set of points in 2D plane
				2) Number of pairs in the file
*/

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

/* global variables and constants */
#define ascending 1

/* function prototypes */
void mergeSort(long int *arr, long int *arrY, unsigned long long int no_of_records);


int main(int argc, char *argv[]){
	FILE *fp_r_inputSet;
    unsigned long int record_count = 0, running_count = 0;
    _Bool record_count_specified = false;
 	long int **points, **points_sorted_onX, **points_sorted_onY;
    char usage[] = "usage: ./ClosestPair \
[Input_file_name No_of_points]";

    switch (argc) {
        case 1:
            fp_r_inputSet = fopen("InputPointSet.txt", "r");
            break;
        case 2:
            fp_r_inputSet = fopen(argv[1], "r");
            break;
        case 3:
            fp_r_inputSet = fopen(argv[1], "r");
            record_count = atoi(argv[2]);
            record_count_specified = true;
            break;
        default:
            printf("Invalid arguments.\n%s\n", usage);
    }

    if (fp_r_inputSet == NULL) {
        printf("Input file doesn't exist. Exiting\n");
        exit(-1);
    }

    /* see one note chapter on Trics in notebook- C Programming for details */
    if (!record_count_specified) {
        while (EOF != (fscanf(fp_r_inputSet, "%*[^\n]"), 
        		fscanf(fp_r_inputSet, "%*c")))
            ++record_count;
    }
    rewind(fp_r_inputSet);
    printf("Number of pairs: %ld\n", record_count);
    
   	/* allocating space to store all the points */
    points = (long int **) malloc(2 * sizeof(long int));
    points[0] = (long int *) malloc(record_count * sizeof(long int));
    points[1] = (long int *) malloc(record_count * sizeof(long int));
    
    /*Creating copies of points sorted based on x and y coordinates
    	arr_sorted_onX
    	arr_sorted_onY, respectively
    */
   	//alocating space
   	points_sorted_onX = (long int **) malloc(2 * sizeof(long int));
    points_sorted_onX[0] = (long int *) malloc(record_count * sizeof(long int));
    points_sorted_onX[1] = (long int *) malloc(record_count * sizeof(long int));
    points_sorted_onY = (long int **) malloc(2 * sizeof(long int));
    points_sorted_onY[0] = (long int *) malloc(record_count * sizeof(long int));
    points_sorted_onY[1] = (long int *) malloc(record_count * sizeof(long int));

    /* reading all the records in array */
    for(running_count = 0; running_count < record_count; running_count++) {
        fscanf(fp_r_inputSet, "%ld\t%ld", &points[0][running_count], 
        		&points[1][running_count]);
		points_sorted_onX[0][running_count] = points[0][running_count];
		points_sorted_onX[1][running_count] = points[1][running_count];
		points_sorted_onY[0][running_count] = points[0][running_count];
		points_sorted_onY[1][running_count] = points[1][running_count];
    }
    
    printf("printing pair of points\n"); 
    for(running_count = 0; running_count < record_count; running_count++) {
        printf("%ld\t%ld\n", points[0][running_count], 
        		points[1][running_count]);
    }
	
    
    //calling merge sort on these one  by one
    mergeSort(points_sorted_onX[0], points_sorted_onX[1], record_count);
    mergeSort(points_sorted_onY[0], points_sorted_onY[1], record_count);
    
    printf("printing pair of points\n"); 
    for(running_count = 0; running_count < record_count; running_count++) {
        printf("%ld\t%ld\n", points_sorted_onX[0][running_count], 
        		points_sorted_onX[1][running_count]);
    }
    
    printf("printing pair of points\n"); 
    for(running_count = 0; running_count < record_count; running_count++) {
        printf("%ld\t%ld\n", points_sorted_onY[0][running_count], 
        		points_sorted_onY[1][running_count]);
    }
   
	return EXIT_SUCCESS;
} 


void mergeSort(long int *arr, long int *arrY, unsigned long long int no_of_records) {
	long int sorted_arr[no_of_records];
	long int sorted_arrY[no_of_records];

//	{
//		unsigned long long int i = 0;
//		for (i = 0; i < no_of_records; i++) {
//			printf("%ld\t", arr[i]);
//		}
//		printf("\nUnsorted array\n");
//	};

	if (no_of_records == 1) {
		sorted_arr[0] = arr[0];
	} else if (no_of_records == 2) {
		if (ascending) {
			if (arr[0] > arr[1]) {
				sorted_arr[0] = arr[1];
				sorted_arr[1] = arr[0];
				sorted_arrY[0] = arrY[1];
				sorted_arrY[1] = arrY[0];
			} else {
				sorted_arr[0] = arr[0];
				sorted_arr[1] = arr[1];
				sorted_arrY[0] = arrY[0];
				sorted_arrY[1] = arrY[1];
			}
		} else {
			if (arr[0] > arr[1]) {
				sorted_arr[0] = arr[0];
				sorted_arr[1] = arr[1];
				sorted_arrY[0] = arrY[0];
				sorted_arrY[1] = arrY[1];
			} else {
				sorted_arr[0] = arr[1];
				sorted_arr[1] = arr[0];
				sorted_arrY[0] = arrY[1];
				sorted_arrY[1] = arrY[0];
			}
		}
	} else {
		//if (no_of_records % 2 == 0) {
			mergeSort(arr, arrY, no_of_records/2);
			mergeSort(arr + no_of_records/2,  arrY + no_of_records/2, no_of_records - no_of_records/2);

			unsigned long long int i = 0, j = 0, k = 0;
			while((i < no_of_records/2) && (j < (no_of_records - no_of_records/2))){
				if (ascending) {
					if (arr[i] > arr[no_of_records/2 + j]) {
						sorted_arr[k] = arr[no_of_records/2 + j];
						sorted_arrY[k] = arrY[no_of_records/2 + j];
						k++; j++;
					} else {
						sorted_arr[k] = arr[i];
						sorted_arrY[k] = arrY[i];
						k++;i++;
					}
				} else {
					if (arr[i] > arr[no_of_records/2 + j]) {
						sorted_arr[k] = arr[i];
						sorted_arrY[k] = arrY[i];
						k++; i++;
					} else {
						sorted_arr[k] = arr[no_of_records/2 + j];
						sorted_arrY[k] = arrY[no_of_records/2 + j];
						k++; j++;
					}
				}
			}

			while (i < no_of_records/2) {
				sorted_arr[k] = arr[i];
				sorted_arrY[k] = arrY[i];
				k++; i++;
			}

			while (j < no_of_records - no_of_records/2) {
				sorted_arr[k] = arr[no_of_records/2 + j];
				sorted_arrY[k] = arrY[no_of_records/2 + j];
				k++; j++;
			}
		//} else {
			/* put logic for odd number of elements */
	//	}
	}

	//arr = sorted_arr;
	{
		unsigned long long int i = 0;
		for (i = 0; i < no_of_records; i++) {
			arr[i] = sorted_arr[i];
			arrY[i] = sorted_arrY[i];
//			printf("%ld\t", arr[i]);
		}
//		printf("\nsorted_arr\n");
	}
	//return arr;
}

